#+STARTUP:OVERVIEW
My emacs config
* A Note
This config is not complete, some of it remains in the original init.el for startup reasons. There is also a bit in early-init.el in terms of visuals that improve startup time immensely, down to about a half second. This is mostly adapted from my actual init.el
* Package
I use the =use-package= package loading system. It works pretty well for improving startup time:
#+begin_src emacs-lisp
  (setq package-archives '(
          ("melpa" . "https://melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")
          ("elpa" . "https://elpa.gnu.org/packages/")))

(require 'use-package)
(setq use-package-always-ensure t)
(unless (package-installed-p 'use-package) (package-install 'use-package))
#+end_src
* Visuals
** Theme
This is the remainder of the visual changes that could not be put in the early-init.el file, that are specific to this emacs profile, such as the default font and the theme
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
   :font "Source Code Pro"
   :foundry 'regular
   :height 140)
  
  (load-theme 'gruber-darker t)
#+end_src
** Modeline & Startup
The other unique aspect of my config is the doom modeline and the dashboard, seen at startup:
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-height 40)
    (doom-modeline-icon t))
  
  (use-package dashboard
   :custom
   (dashboard-startup-banner "~/repos/mcardoff/Profile.png")
   (dashboard-items '((recents  . 5)
                      (agenda   . 5)))
   (dashboard-set-heading-icons t)
   (dashboard-set-file-icons t)
   :config (dashboard-setup-startup-hook))
#+end_src
* Completion framework
Initially I used Ido for the completion framework, and it was not the best, so now I use the Ivy framework, which seems to work a lot better despite the fact it is a lot bigger, but it has a lot more info than Ido.
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           ("C-x b" . ivy-switch-buffer)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init (ivy-mode 1)
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-wrap t)
    (ivy-count-format "(%d/%d) ")
    :custom-face
    (ivy-current-match ((t (:extend t :background "#ffdd33" :foreground "black"))))
    (ivy-minibuffer-match-highlight ((t (:inherit compilation-warning))))
    (ivy-minibuffer-match-face-1 ((t (:background "#cc8c3c"))))
    :config
    (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist)
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist))
  
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ;; ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-x b" . counsel-switch-buffer)
           ("C-M-l" . counsel-imenu)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    (ivy-initial-inputs-alist nil))
#+end_src
Ivy rich is a way to improve the info given, including directory info and icons that give a cleaner look:
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init (ivy-rich-mode 1)
    :after counsel
    :custom
    (ivy-format-function #'ivy-format-function-line))
  
  (use-package all-the-icons-ivy-rich
    :init (all-the-icons-ivy-rich-mode 1))
#+end_src
* Plain elisp
** Auto modes
Since octave mode is built-in, there is no easy way to add =.m= files to the octave audo mode list using use-package, so I do it here:
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
#+end_src
** Custom functions
I have a few functions that need to be used in the following section, so they are all compiled here:
#+begin_src emacs-lisp
  (defun mpc/LaTeX-setup ()
    (visual-line-mode 1)
    (hl-line-mode 1))
  
  (defun mpc/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (hl-line-mode 1))
  
  (defun mpc/TeX-view-once (doc)
    "View TeX output and clean up after `my/TeX-compile-and-view'.
    Call `TeX-view' to display TeX output, and remove this function
    from `TeX-after-TeX-LaTeX-command-finished-hook', where it may
    have been placed by `my/TeX-compile-and-view'."
    (TeX-view)
    (remove-hook 'TeX-after-TeX-LaTeX-command-finished-hook #'mpc/TeX-view-once))
  
  (defun mpc/TeX-compile-and-view ()
    "Compile current master file using LaTeX then view output. Run the \"LaTeX\" command on the master file for active buffer. When compilation is complete, view output with default viewer (using `TeX-view')."
    (interactive)
    (TeX-command "LaTeX" 'TeX-master-file)
    (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook #'mpc/TeX-view-once))
  
  (defun dotemacs () (interactive) (find-file (concat user-emacs-directory "init.el")))
  
  (defun initorg () (interactive) (find-file (concat user-emacs-directory "EmacsInit.org")))
#+end_src
** Custom keybinds
These are just ease of use for navigating windows, essentially replacing some basic =C-x= functions with the =M= equivalent. However, in addition, there is a couple others too, such as =<escape>= for quitting and =M-r/R= to resize windows.
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "M-1") 'delete-other-windows)
  (global-set-key (kbd "M-2") 'split-window-below)
  (global-set-key (kbd "M-3") 'split-window-right)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-r") 'enlarge-window)
  (global-set-key (kbd "M-R") 'shrink-window)
#+end_src
Here I define =C-z= as a map for some of my commonly used functions defined in the previous section
#+begin_src emacs-lisp
  (define-prefix-command 'mpc-map)
  (global-set-key (kbd "C-z") 'mpc-map)
  (global-set-key (kbd "C-z a") 'org-agenda)
  (global-set-key (kbd "C-z l") 'org-agenda-list)
  (global-set-key (kbd "C-z i") 'dotemacs)
  (global-set-key (kbd "C-z d") 'initorg)
#+end_src
As an added bonus I have the =which-key= mode installed, so I can see which commands I have binded above:
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :custom (which-key-idle-delay 0.3))  
#+end_src
* Text-Editing modes
** LaTeX
So far, I am loving aucTeX for my LaTeX documents, and it is helping my editing, so I use that!
#+begin_src emacs-lisp
  (use-package auctex
    :defer 
    :hook
    (TeX-mode . mpc/LaTeX-setup)
    (plain-TeX-mode . mpc/LaTeX-setup)
    (TeXinfo-mode . mpc/LaTeX-setup)
    (LaTeX-mode . mpc/LaTeX-setup)
    (docTeX-mode . mpc/LaTeX-setup)
    :custom
    (TeX-view-program-selection 
     '(((output-dvi has-no-display-manager) "dvi2tty") 
       ((output-dvi style-pstricks)  "dvips and gv")
       (output-dvi "xdvi")
       (output-pdf "Zathura")
       (output-html "xdg-open")))
  
    (LaTeX-indent-environment-list
     '(("verbatim" current-indentation)
       ("verbatim*" current-indentation)
       ("filecontents" current-indentation)
       ("filecontents*" current-indentation)
       ("tabular" LaTeX-indent-tabular)
       ("tabular*" LaTeX-indent-tabular)
       ("array" LaTeX-indent-tabular)
       ("picture")
       ("tabbing"))))
#+end_src
** Moving text
Move-text is usefule for moving text line by line at a time, especially with blocks of text.
#+begin_src emacs-lisp
  (use-package move-text
    :defer 2
    :diminish 
    :bind (("M-p" . 'move-text-up)
           ("M-n" . 'move-text-down)))
#+end_src
** Multiple cursors
Just another fairly basic feature in a modern editor to edit multiple occurences of something, or even multiple lines!
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :defer 2
    :diminish
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->"         . mc/mark-next-like-this)
           ("C-<"         . 'mc/mark-previous-like-this)
           ("C-c C-<"     . 'mc/mark-all-like-this)))
#+end_src
** Snippets
Snippets are another useful feature in emacs, especially when making literate configurations like this. 
#+begin_src emacs-lisp
  (use-package yasnippet
    :defer 5
    :init (yas-global-mode)
    :custom (yas-snippet-dirs '("~/eprofiles/regmacs/mysnippets")))
#+end_src
** Org mode
Org mode is super useful, but if you are reading this you probably know that
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . mpc/org-mode-setup)
    :custom
    (org-ellipsis " [+]")
    (org-directory "~/repos/org-agenda/School Schedules/")
    (org-agenda-files (concat user-emacs-directory "org_agenda.org"))
    (org-structure-template-alist
     '(("s" . "src")
       ("e" . "example")
       ("q" . "quote")
       ("v" . "verse")
       ("V" . "verbatim")
       ("c" . "center")
       ("C" . "comment")
       ("l" . "latex")
       ("a" . "ascii")
       ("i" . "index")))
    :custom-face
    (org-block    ((t (:foreground "#e4e4ef"))))
    (org-ellipsis ((t (:foreground "#FFFFFF" :underline nil))))
    (outline-3    ((t (:foreground "#ffdd33" :weight bold :family "Source Code Pro" :slant normal))))
    :config
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode)))
  
  (use-package org-bullets
    :defer
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src
* Coding Adjacent
** Magit
I love magit, it is super robust to use, and the config is drop dead simple to use, in fact it is only two lines because I made it two lines
#+begin_src emacs-lisp
  (use-package magit
    :defer 5)
#+end_src
** Projectile
I have not really gotten to use projectile too much, but I have a config for it, so maybe one day I will use it.
#+begin_src emacs-lisp
  (use-package projectile
    :defer
    :diminish projectile-mode
    :config (projectile-mode)
    ;; :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-z p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src
** Cuda
I need to edit =CUDA= files for research, so I need =CUDA-mode=:
#+begin_src emacs-lisp
  (use-package cuda-mode
    :defer
    :config
    (add-to-list 'auto-mode-alist '("\\.cu$" . cuda-mode)))
#+end_src
* MISC
** Elfeed
elfeed is fun
#+begin_src emacs-lisp
  (use-package elfeed
    :defer 5
    :custom
    (elfeed-feeds '("http://www.reddit.com/r/emacs/.rss"
                    "http://www.reddit.com/r/Physics/.rss")))
#+end_src
** Homework stuff
bleh
#+begin_src emacs-lisp
  (setq schoolpath "~/school/")
  (setq templatepath "~/school/template.tex")
    
  (defun gencopy (subj code)
    (let ((fname
           (read-file-name
           (concat subj ": ")
               (concat schoolpath (concat code "/HW/")))))
    (copy-file templatepath fname) (find-file fname)))
  
  (defun starthw ()
    (interactive)
    (let ((x (upcase (read-string "Class Shorthand: "))))
      (cond ((string= x "CM") (gencopy "CM" "PHYS309"))
            ((string= x "QM") (gencopy "QM" "PHYS406"))
            ((string= x "EM") (gencopy "EM" "PHYS414"))
            ((string= x "MM") (gencopy "MM" "PHYS502"))
            ((string= x "GQ") (gencopy "GQ" "PHYS510"))
            (t "failed"))))
  
  (defun continuehw ()
    (interactive)
    (let ((x (upcase (read-string "Class Shorthand: "))))
      (cond ((string= x "CM") (find-file (concat schoolpath "/PHYS309/HW/")))
            ((string= x "QM") (find-file (concat schoolpath "/PHYS406/HW/")))
            ((string= x "EM") (find-file (concat schoolpath "/PHYS414/HW/")))
            ((string= x "MM") (find-file (concat schoolpath "/PHYS502/HW/")))
            ((string= x "GQ") (find-file (concat schoolpath "/PHYS510/HW/")))
            (t "failed"))))
#+end_src
