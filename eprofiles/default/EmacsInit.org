#+STARTUP:OVERVIEW
My emacs config
* A Note
This config is not complete, some of it remains in the original init.el for startup reasons. There is also a bit in early-init.el in terms of visuals that improve startup time immensely, down to about a half second. This is mostly adapted from my actual init.el
* Startup Helping
I set some variables here that will help later
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (defvar mpc--file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (setq custom-file (concat user-emacs-directory ".emacs-custom.el"))
  (setq native-comp-deferred-compilation t)
  (setq backup-directory-alist '(("." . "~/.emacsenv/cache/")))
#+end_src
* Package
I use the =use-package= package loading system. It works pretty well for improving startup time:
#+begin_src emacs-lisp
  (setq package-archives '(
            ("melpa" . "https://melpa.org/packages/")
            ("org" . "https://orgmode.org/elpa/")
            ("elpa" . "https://elpa.gnu.org/packages/")))
  
  ;; (package-initialize)
  (require 'use-package)
  (unless (package-installed-p 'use-package) (package-install 'use-package))
  (setq use-package-always-ensure t)
#+end_src
I have had issues on newer versions of emacs with my config that results in an issue if I do not have a =(package-initialize)= here
* Visuals
** Font & Theme
This is the remainder of the visual changes that could not be put in the early-init.el file, that are specific to this emacs profile, such as the default font and the theme
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "Source Code Pro"
    :foundry 'regular
    :height 140)
  
  (cond ((not (package-installed-p 'gruber-darker-theme))
         (use-package gruber-darker-theme))
        (t (load-theme 'gruber-darker t)))
#+end_src
** Modeline & Startup
The other unique aspect of my config is the doom modeline and the dashboard, seen at startup:
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-height 40)
    (doom-modeline-icon t))
  
  (use-package dashboard
    :custom
    (dashboard-startup-banner "~/repos/mcardoff/Profile.png")
    (dashboard-items '((recents  . 5)
                       (agenda   . 5)))
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    :config (dashboard-setup-startup-hook))
#+end_src
Dashboard is a little finnicky and does not always work with multiple profiles. By default it will not show if you pass more than one command-line arg, this means we should change the file so that the last function defined checks for at least 3 instead of 2 command line args.
* Completion Framework
** Company
I am still new to company, but it seems to be doing more good than harm, so it is staying for now
#+begin_src emacs-lisp
  (use-package company
    :diminish
    :init (global-company-mode))
#+end_src
** Ivy
Initially I used Ido for the completion framework, and it was not the best, so now I use the Ivy framework, which seems to work a lot better despite the fact it is a lot bigger, but it has a lot more info than Ido.
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           ("C-x b" . ivy-switch-buffer)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init (ivy-mode 1)
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-wrap t)
    (ivy-count-format "(%d/%d) ")
    :custom-face
    (ivy-current-match ((t (:extend t :background "#ffdd33" :foreground "black"))))
    (ivy-minibuffer-match-highlight ((t (:inherit compilation-warning))))
    (ivy-minibuffer-match-face-1 ((t (:background "#cc8c3c"))))
    :config
    (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist)
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist))
  
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ;; ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-x b" . counsel-switch-buffer)
           ("C-M-l" . counsel-imenu)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    (ivy-initial-inputs-alist nil))
#+end_src
Ivy rich is a way to improve the info given, including directory info and icons that give a cleaner look:
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init (ivy-rich-mode 1)
    :after counsel
    :custom
    (ivy-format-function #'ivy-format-function-line))
  
  (use-package all-the-icons-ivy-rich
    :init (all-the-icons-ivy-rich-mode 1))
#+end_src
The one problem with Ivy is that it is super slow when combined with tramp, so I created a new profile, Ido, which still uses ido/smex for tramp purposes
* Plain elisp
** Custom functions
I have a few functions that need to be used in the following section, so they are all compiled here:
#+begin_src emacs-lisp
  (defun mpc/LaTeX-setup ()
    ;; (hl-line-mode 1)
    (visual-line-mode 1))
  
  (defun mpc/org-mode-setup ()
    (org-indent-mode)
    ;; (hl-line-mode 1)
    (visual-line-mode 1))
  
  (defun mpc/doc-view-setup ()
    (display-line-numbers-mode 0))
  
  (defun mpc/TeX-view-once (doc)
    "View TeX output and clean up after `my/TeX-compile-and-view'.
    Call `TeX-view' to display TeX output, and remove this function
    from `TeX-after-TeX-LaTeX-command-finished-hook', where it may
    have been placed by `my/TeX-compile-and-view'."
    (TeX-view)
    (remove-hook 'TeX-after-TeX-LaTeX-command-finished-hook #'mpc/TeX-view-once))
  
  (defun mpc/TeX-compile-and-view ()
    "Compile current master file using LaTeX then view output. Run the \"LaTeX\" command on the master file for active buffer. When compilation is complete, view output with default viewer (using `TeX-view')."
    (interactive)
    (TeX-command "LaTeX" 'TeX-master-file)
    (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook #'mpc/TeX-view-once))
  
  (defun dotemacs ()
    "Opens init.el"
    (interactive)
    (find-file (concat user-emacs-directory "init.el")))
  
  (defun initorg ()
    "Opens EmacsInit.org"
    (interactive)
    (find-file (concat user-emacs-directory "EmacsInit.org")))
#+end_src
I also have a custom file that defines =find-files= for use in =general.el= down below.
#+begin_src emacs-lisp
  (load-file (concat user-emacs-directory "configfuns.el"))
#+end_src
** Custom keybinds
Here I set some useful keys for navigating windows as well as my personal keymap in =C-z= for a couple things. General makes it easy to define keys with a leader key, which is usefile when you have a lot. I start by getting rid of the stupid =C-z= binding that suspends the window, useless for someone using a tiling wm.
#+begin_src emacs-lisp
  (use-package general
    :config
    (global-unset-key (kbd "C-z"))
#+end_src
Now I define some bindings to =C-z= for my sanity:
#+begin_src emacs-lisp
    (general-define-key
     :prefix "C-z"
     "a" 'org-agenda
     "l" 'org-agenda-list
     "i" 'dotemacs
     "d" 'initorg)
#+end_src  
I also define some quick links to my configs, I could achieve this with bookmarks, which I will hopefully do at some point soon. 
#+begin_src emacs-lisp
    (general-define-key
     :prefix "C-z c"
     "a" 'alaconfig
     "e" 'dotemacs
     "i" 'i3config
     "k" 'kakconfig
     "p" 'pbconfig
     "r" 'rngconfig)
#+end_src  
Finally some useful commands for window navigations
#+begin_src emacs-lisp
    (general-define-key
     "<escape>" 'keyboard-escape-quit
     "M-1" 'delete-other-windows
     "M-2" 'split-window-below
     "M-3" 'split-window-right
     "M-o" 'other-window
     "M-r" 'enlarge-window
     "M-R" 'shrink-window))
#+end_src
** Which-Key
As an added bonus I have the =which-key= mode installed, so I can see which commands I have binded above:
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :defer
    :custom (which-key-idle-delay 0.3))  
#+end_src
* Text-Editing modes
** LaTeX
So far, I am loving AUCTeX for my LaTeX documents, and it is helping my editing, so I use that!
#+begin_src emacs-lisp
  (use-package auctex
    :defer
    :hook
    (TeX-mode . mpc/LaTeX-setup)
    (plain-TeX-mode . mpc/LaTeX-setup)
    (TeXinfo-mode . mpc/LaTeX-setup)
    (LaTeX-mode . mpc/LaTeX-setup)
    (docTeX-mode . mpc/LaTeX-setup)
    :custom
    (TeX-view-program-selection
      '(((output-dvi has-no-display-manager) "dvi2tty") 
        ((output-dvi style-pstricks)  "dvips and gv")
         (output-dvi "xdvi")
         (output-pdf "Zathura")
         (output-html "xdg-open")))
  
    (LaTeX-indent-environment-list
     '(("verbatim" current-indentation)
       ("verbatim*" current-indentation)
       ("filecontents" current-indentation)
       ("filecontents*" current-indentation)
       ("tabular" LaTeX-indent-tabular)
       ("tabular*" LaTeX-indent-tabular)
       ("array" LaTeX-indent-tabular)
       ("picture")
       ("tabbing"))))
#+end_src
** Doc-View
I do not want Doc-View to have the line number(s) on the side, so I make use of an earlier defun:
#+begin_src emacs-lisp
  (use-package doc-view
    :ensure nil
    :defer 2
    :hook (doc-view-mode . mpc/doc-view-setup))
#+end_src
** Text Manipulation
*** Moving text
Move-text is usefule for moving text line by line at a time, especially with blocks of text.
#+begin_src emacs-lisp
  (use-package move-text
    :defer 2
    :diminish 
    :bind (("M-p" . 'move-text-up)
           ("M-n" . 'move-text-down)))
#+end_src
*** Multiple cursors
Just another fairly basic feature in a modern editor to edit multiple occurences of something, or even multiple lines!
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :defer 2
    :diminish
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->"         . mc/mark-next-like-this)
           ("C-<"         . 'mc/mark-previous-like-this)
           ("C-c C-<"     . 'mc/mark-all-like-this)))
#+end_src
*** Snippets
Snippets are another useful feature in emacs, especially when making literate configurations like this. 
#+begin_src emacs-lisp
  (use-package yasnippet
    :defer 5
    :init (yas-global-mode)
    :custom (yas-snippet-dirs '("~/eprofiles/regmacs/mysnippets")))
#+end_src
You might want to add these snippets to your directory, however I find them somewhat annoying when editing elisp
#+begin_example
  (use-package yasnippet-snippets
    :after yasnippet)
#+end_example
** Org mode
*** Org-Bullets
Org-Bullets makes an org document look nice and less like plain text
#+begin_src emacs-lisp
  (require 'org-tempo)
  (use-package org-bullets
    :defer
    ;; :after org
    :hook (org-mode . org-bullets-mode))
#+end_src
*** Org-Roam
Roam is an interesting note taking system, so far it is useful for note taking in class especially during lectures, using the zettelkasten thought process
#+begin_src emacs-lisp
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-graph-executable "dot")
    (org-roam-directory "~/Roam")
    (org-roam-completion-everywhere t)
    (org-roam-completion-system 'ivy)
    :bind (("C-z n l" . org-roam-buffer-toggle)
           ("C-z n f" . org-roam-node-find)
           ("C-z n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+end_src
*** Org Mode
Org mode is super useful, but if you are reading this you probably know that
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . mpc/org-mode-setup)
    :bind (("<C-M-return>" . org-insert-todo-subheading))
    :custom
    (org-ellipsis " [+]")
    (org-directory "~/repos/org-agenda/School Schedules/")
    (org-agenda-files (concat user-emacs-directory "org_agenda.org"))
    (org-structure-template-alist
     '(("s"  . "src")
       ("e"  . "example")
       ("q"  . "quote")
       ("v"  . "verse")
       ("V"  . "verbatim")
       ("c"  . "center")
       ("C"  . "comment")
       ("l"  . "latex")
       ("a"  . "ascii")
       ("i"  . "index")
       ("el" . "src emacs-lisp")))
    :custom-face
    (org-block    ((t :foreground "#e4e4ef")))
    (org-ellipsis ((t :foreground "#FFFFFF" :underline nil)))
    (org-level-1  ((t :inherit 'outline-1 :height 1.20)))
    :config
    (setq org-tempo-keywords-alist nil))
#+end_src
* Coding Adjacent
** Magit
I love magit, it is super robust to use, and the config is drop dead simple to use, in fact it is only two lines because I made it two lines
#+begin_src emacs-lisp
  (use-package magit
    :defer 5)
#+end_src
** Tramp
Tramp is useful for editing files on remote machines, but not on this config, so I disable it 
#+begin_example 
  (use-package tramp :defer)
#+end_example
** Projectile
I have not really gotten to use projectile too much, but I have a config for it, so maybe one day I will use it.
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    ;; :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-z p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src
I am not even sure if =counsel-projectile= works, but I have it here:
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :defer
    :after 'projectile
    :config (counsel-projectile-mode))
#+end_src
** Cuda
I need to edit =CUDA= files for research, so I need =CUDA-mode=:
#+begin_src emacs-lisp
  (use-package cuda-mode
    :defer
    :config
    (add-to-list 'auto-mode-alist '("\\.cu$" . cuda-mode)))
#+end_src
** Octave
Octave is a useful alternative to Mathematica or MATLAB
#+begin_src emacs-lisp
  (use-package octave
    :ensure nil
    :defer
    :config (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode)))
#+end_src
** Haskell
I love Haskell, every so often I will go back and use it for fun, and the haskell mode in melpa is very useful.
#+begin_src emacs-lisp
  (use-package haskell-mode
    :defer
    :bind (("C-c C-c" . compile))
    :hook ((haskell-mode . interactive-haskell-mode)
           (haskell-mode . haskell-indent-mode))
    :custom
    (haskell-stylish-on-save t))
#+end_src
I also use a linter that helps clean up the code
#+begin_src emacs-lisp
  (use-package hlint-refactor
    :defer
    :after haskell-mode
    :hook (haskell-mode . hlint-refactor-mode))
#+end_src
** Clojure
Oh boy here is go functional programming again
#+begin_src emacs-lisp
  (use-package clojure-mode :defer)
#+end_src
** Yaml
This is mostly to make editing my alacritty config easier
#+begin_src emacs-lisp
  (use-package yaml-mode :defer)
#+end_src
* Fun Stuff!
** Elfeed
elfeed is fun, I do not really use it too much
#+begin_src emacs-lisp
  (use-package elfeed
    :defer 5
    :custom
    (elfeed-feeds '("http://www.reddit.com/r/emacs/.rss"
                    "http://www.reddit.com/r/Physics/.rss")))
#+end_src
** mu4e
This is an email system for emacs, I still am unable to actually send mail with it but I am getting there!
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :defer 1 ; Wait until 1 seconds after startup
    :custom
    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (mu4e-change-filenames-when-moving t)
  
    ;; Refresh mail using isync every 10 minutes
    (mu4e-update-interval (* 10 60))
    (mu4e-get-mail-command "mbsync -a")
    (mu4e-maildir "~/Mail")
  
    (mu4e-drafts-folder "/[Gmail]/Drafts")
    (mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (mu4e-refile-folder "/[Gmail]/All Mail")
    (mu4e-trash-folder  "/[Gmail]/Trash")
  
    (mu4e-maildir-shortcuts
     '(("/Inbox"             . ?i)
       ("/[Gmail]/Sent Mail" . ?s)
       ("/[Gmail]/Trash"     . ?t)
       ("/[Gmail]/Drafts"    . ?d)
       ("/[Gmail]/All Mail"  . ?a)
       ("/[Gmail]/Teacher Emails/Sullivan"   . ?z)
       ("/[Gmail]/Teacher Emails/Dr. Z"      . ?x)
       ("/[Gmail]/Teacher Emails/Littlejohn" . ?c)
       ("/[Gmail]/Teacher Emails/Rosenberg"  . ?v)
       ("/[Gmail]/Teacher Emails/Hood"       . ?b)
       ("/[Gmail]/Teacher Emails/IPRO"       . ?n))))  
#+end_src
Sending mail requires we use the =smtpmail= builtin package
#+begin_src emacs-lisp
  (use-package smtpmail
    :ensure nil
    :custom
    (smtp-smtp-server "smtp.gmail.com")
    (smtpmail-smtp-service 587)
    (smtpmail-stream-type 'ssl)
    (smtpmail-auth-credentials
     '(("smtp.gmail.com" 587 "mcardiff0321"
        (with-temp-buffer
          (insert-files-contents "~/.pass")
          (buffer-string)))))
    :config
    (setq message-send-mail-function 'smtpmail-send-it))
#+end_src
** Homework stuff
I made these without knowing of template expansions, so theyre kind of useless now
#+begin_src emacs-lisp
  (defvar schoolpath "~/school/")
  (defvar templatepath "~/school/template.tex")
    
  (defun gencopy (subj code)
    (let ((fname
           (read-file-name
           (concat subj ": ")
               (concat schoolpath (concat code "/HW/")))))
    (copy-file templatepath fname) (find-file fname)))
  
  (defun starthw ()
    (interactive)
    (let ((x (upcase (read-string "Class Shorthand: "))))
      (cond ((string= x "CM") (gencopy "CM" "PHYS309"))
            ((string= x "QM") (gencopy "QM" "PHYS406"))
            ((string= x "EM") (gencopy "EM" "PHYS414"))
            ((string= x "MM") (gencopy "MM" "PHYS502"))
            ((string= x "GQ") (gencopy "GQ" "PHYS510"))
            (t "failed"))))
  
  (defun continuehw ()
    (interactive)
    (let ((x (upcase (read-string "Class Shorthand: "))))
      (cond ((string= x "CM") (find-file (concat schoolpath "/PHYS309/HW/")))
            ((string= x "QM") (find-file (concat schoolpath "/PHYS406/HW/")))
            ((string= x "EM") (find-file (concat schoolpath "/PHYS414/HW/")))
            ((string= x "MM") (find-file (concat schoolpath "/PHYS502/HW/")))
            ((string= x "GQ") (find-file (concat schoolpath "/PHYS510/HW/")))
            (t "failed"))))
#+end_src
* Cleaning up what we started
This is the last bit of what we did at the Startup Helping section
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
  (lambda () (setq file-name-handler-alist mpc--file-name-handler-alist)))
#+end_src
