import numpy as np
import cmath as cm
from scipy.special import spherical_jn, spherical_yn, h1vp, h2vp

#Hankel Functions and respective derivatives
def h1(n,r):
    return spherical_jn(n,r) + 1j*spherical_yn(n,r)

def h2(n,r):
    return spherical_jn(n,r)-1j*spherical_yn(n,r)

def h1p(n,r):
    return spherical_jn(n,r,1) + 1j*spherical_yn(n,r,1)

def h2p(n,r):
    return spherical_jn(n,r,1)-1j*spherical_yn(n,r,1)

#Riccati-Bessel Functions psi and xi and respective derivatives
def psi(n,r):
    return r*spherical_jn(n,r)

def xi(n,r):
    return r*h1(n,r)

def psip(n,r):
    return spherical_jn(n,r) + r * spherical_jn(n,r,1)

def xip(n,r):
    return h1(n,r) + r * h1p(n, r)

#Logarithmic Derivative
def D(n,r):
    return psi(n-1,r)/psi(n,r)-n/r

# Dielectric constant
def Dielec(wl):
    e = 1239.841984 / wl
    einf = 1.2
    wp = 11.6
    im = 0.1
    return cm.sqrt(einf*(1-((wp)**2)/(e**2)) + im*1j)

#Index of refraction (exp fit to expt data)
def Min(wl):
    e = 1239.841984 / wl
    return (0.169918+0.748822*np.exp(-0.7*(e-2))) + (0.729676+5.04016*np.exp(-0.4*(e-2)))*1j
    # r = -0.885065 + 0.00433653*wl - 1.3854e-6 * wl**2
    # i = 1.01808 + 0.00713627*wl - 3.50259e-7 * wl**2
    # return r + i*1j

def Min2(wl):
    # Not used
    n = (2.425365849e-6)*(wl**2)+(-9.035088405e-5)*wl+1.4334428037e-1
    k = (-3/8022379097e-6)*(wl**2)+(1.34531048509e-2)*wl-8.3953304203e-1
    return n + 1j*k

#Scattering expansion coefficients an, bn
def acoeff(n,m,x):
    num = (D(n,m*x)/m + n/x)*psi(n,x)-psi(n-1,x)
    den = (D(n,m*x)/m + n/x)*xi(n,x)-xi(n-1,x)
    return num / den

def bcoeff(n,m,x):
    num = (m*D(n,m*x)+n/x)*psi(n,x)-psi(n-1,x)
    den = (m*D(n,m*x)+n/x)*xi(n,x)-xi(n-1,x)
    return num / den

