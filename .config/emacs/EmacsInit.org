#+STARTUP:OVERVIEW
#+TITLE: Emacs Literate Config
#+AUTHOR: mcardoff
#+PROPERTY: header-args :tangle yes ~/repos/dotfiles/.config/emacs/init.el

My emacs config
* A Note
This config is not complete, some of it remains in the original init.el for startup reasons. There is also a bit in early-init.el in terms of visuals that improve startup time immensely, down to about a half second. This is mostly adapted from my actual init.el
* Startup Help
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  ;;; Startup stuff
  (defvar mpc--file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src
* Package
I use the =use-package= package loading system. It works pretty well for improving startup time:
#+begin_src emacs-lisp
  (setq package-archives '(
            ("melpa" . "https://melpa.org/packages/")
            ;; ("org" . "https://orgmode.org/elpa/")
            ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; requires for emacs 28
  ;; (package-initialize)
  (setq use-package-always-ensure t)
  (unless (package-installed-p 'use-package) (package-install 'use-package))
#+end_src
I have had issues on newer versions of emacs with my config that results in an issue if I do not have a =(package-initialize)= here
* Visuals
** Theme
This is the remainder of the visual changes that could not be put in the early-init.el file, that are specific to this emacs profile, such as the default font and the theme
#+begin_src emacs-lisp
  (cond ((not (package-installed-p 'gruber-darker-theme))
         (use-package gruber-darker-theme))
        (t (load-theme 'gruber-darker t)))
#+end_src
** Deferring Unused Packages
Emacs often loads all the packages it has installed at startup, by ignoring some until they are needed, we can speed up our startup quite a bit
#+begin_src emacs-lisp
  (use-package rainbow-mode :defer t)

  (use-package recentf :defer t)

  (use-package saveplace :defer t)

  (use-package saveplace-pdf-view :defer t)

  (use-package server :defer t)

  (use-package autorevert :defer t)

  (use-package saveplace-pdf-view :defer t)

  (use-package auth-source
    :defer 1
    :custom (auth-sources ("~/.config/emacs/authinfo.gpg")))
#+end_src
** Modeline
The doom modeline is one of the most visually appealing
#+begin_src emacs-lisp
  (use-package doom-modeline
    :defer 1
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-height 40)
    (doom-modeline-icon t))
#+end_src
** Dashboard
The other unique aspect of my config is the dashboard, seen at startup:
#+begin_src emacs-lisp
  ;; Doesnt work with emacs 29
  (use-package dashboard
    :hook ((after-init . dashboard-setup-startup-hook)
           (after-init . dashboard-insert-startupify-lists))
    :custom
    (dashboard-startup-banner 'logo)
    (dashboard-items '((recents   . 10)
                       (bookmarks . 10)
                       (agenda    . 10)))
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-center-content t)
    ;; :config (dashboard-setup-startup-hook)
    )
#+end_src
Dashboard is a little finnicky and does not always work with multiple profiles. By default it will not show if you pass more than one command-line arg, this means we should change the file so that the last function defined checks for at least 3 instead of 2 command line args.
* Completion Framework
** Company
I am still new to company, but it seems to be doing more good than harm, so it is staying for now
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (after-init . global-company-mode)
    ;; :init (global-company-mode)
    :diminish)
#+end_src
** Ivy
Initially I used Ido for the completion framework, and it was not the best, so now I use the Ivy framework, which seems to work a lot better despite the fact it is a lot bigger, but it has a lot more info than Ido.
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    :hook (after-init . ivy-mode)
    :bind (("C-s" . swiper)
           ("C-x b" . ivy-switch-buffer)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-wrap t)
    (ivy-count-format "(%d/%d) ")
    :custom-face
    (ivy-current-match ((t (:extend t :background "#ffdd33" :foreground "black"))))
    (ivy-minibuffer-match-highlight ((t (:inherit compilation-warning))))
    (ivy-minibuffer-match-face-1 ((t (:background "#cc8c3c"))))
    :config
    (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist)
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist))
#+end_src
*** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-x b" . counsel-switch-buffer)
           ("C-M-l" . counsel-imenu)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    (ivy-initial-inputs-alist nil))
#+end_src
* Plain elisp
** defuns
I have a few functions that need to be used in the following section, so they are all compiled here:
#+begin_src emacs-lisp
  (defun mpc/LaTeX-setup ()
    ;; (hl-line-mode 1)
    (visual-line-mode 1))

  (defun mpc/org-mode-setup ()
    (org-indent-mode)
    (display-line-numbers-mode 0)
    (visual-line-mode 1))

  (defun mpc/no-lines-setup ()
    (display-line-numbers-mode 0))

  (defun mpc/TeX-view-once (doc)
    "View TeX output and clean up after `my/TeX-compile-and-view'.
    Call `TeX-view' to display TeX output, and remove this function
    from `TeX-after-TeX-LaTeX-command-finished-hook', where it may
    have been placed by `my/TeX-compile-and-view'."
    (TeX-view)
    (remove-hook 'TeX-after-TeX-LaTeX-command-finished-hook #'mpc/TeX-view-once))

  (defun mpc/TeX-compile-and-view ()
    "Compile current master file using LaTeX then view output. Run the \"LaTeX\" command on the master file for active buffer. When compilation is complete, view output with default viewer (using `TeX-view')."
    (interactive)
    (TeX-command "LaTeX" 'TeX-master-file)
    (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook #'mpc/TeX-view-once))

  (defun mpc/hide-latex-preamble ()
    "Hide just the LaTeX preamble."
    (interactive)
    (save-restriction
      (save-excursion
        (save-match-data
          (widen)
          (goto-char (point-min))
          (when (re-search-forward "\\documentclass" nil t)
            (hide-subtree))))))

  (defun mpc/org-agenda-list ()
    (delq nil
          (mapcar (lambda (buffer)
                    (buffer-file-name buffer))
                  (org-buffer-list 'files t))))

  ; temporary solution, hopefully can be replaced by something more dynamic
  (defvar mpc/latest-org-file "~/Org/Agenda/SU23.org")

  (defun mpc/prompt-num ()
    "Prompt user to enter a number, with input history support."
    (interactive)
    (let (n)
      (setq n (read-number "Type a number: "))
      (message "Number is %s" n)))

  (defvar script-path "~/.local/scripts/find_next_hw.sh")
  (defun mpc/next-hw-num (class sem schoolpath)
    (shell-command-to-string (format "/home/mcard/.local/scripts/next_hw_num.sh %s %s" sem class)))

  (defun mpc/make-latest-hw-file (class sem school-path)
    "class: Subject indicator and number, sem: [FA/SP]YY, school path: no slash at end"
    (format "%s/%s/%s/%s" school-path sem class (shell-command-to-string (format "%s %s %s" script-path sem class))))

  (defun mpc/create-todo-entry (num subj semester)
    (format
     "* TODO %s HW %%(mpc/next-hw-num \"%s%s\" \"%s\" \"~/school\") [[%%(mpc/make-latest-hw-file \"%s%s\" \"%s\" \"~/school\")][LaTeX File]]"
     num subj num semester subj num semester))

  (defun mpc/create-next-lecture-todo (classnum subj semester)
    (format
     "* TODO 19a Lab %%? Lecture [[%s][Slides]]"
     (shell-command-to-string
      (format
       "/home/mcard/.local/scripts/find_next_lec.sh %s %s%s"
       semester subj classnum))))

  (defun mpc/capture-template-skeleton (prefix titleprompt deadlinetext)
    (format
     "* TODO %s%%^{%s} @ %%^{Start Time} \nDEADLINE: %s"
     prefix titleprompt deadlinetext))

  (defun mpc/meeting-custom-dl (prefix) (mpc/capture-template-skeleton prefix "Meeting" "%^{DEADLINE}t"))

  (defun mpc/meeting-fixed-dl (prefix dow)
    (mpc/capture-template-skeleton
     prefix "Meeting" (format "%%(org-insert-time-stamp (org-read-date nil t \"+%s\"))" dow)))

  (defun mpc/action-item (prefix days-ahead)
    (mpc/capture-template-skeleton
     prefix "Action Item" (format "%%(org-insert-time-stamp (org-read-date nil t \"+%sd\"))" days-ahead)))

  (defun dotemacs ()
    "Opens init.el"
    (interactive)
    (find-file (concat user-emacs-directory "init.el")))

  (defun initorg ()
    "Opens EmacsInit.org"
    (interactive)
    (find-file (concat user-emacs-directory "EmacsInit.org")))

  (defun agendafile ()
    "open the latest modified org-agenda file"
    (interactive)
    (find-file (shell-command-to-string "/home/mcard/.local/scripts/latestorg.sh")))
#+end_src
* Custom keybinds
** General Keybinds
Here I set some useful keys for navigating windows as well as my personal keymap in =C-z= for a couple things. General makes it easy to define keys with a leader key, which is usefile when you have a lot. I start by getting rid of the stupid =C-z= binding that suspends the window, useless for someone using a tiling wm.
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    (global-unset-key (kbd "C-z"))
#+end_src
Now I define some bindings to =C-z= for my sanity:
#+begin_src emacs-lisp
  (general-define-key
   :prefix "C-z"
   "" '(nil :which-key "General Prefix")
   "C-c" '(org-capture :which-key "Capture!")
   "a" '(org-agenda :which-key "Open Agenda")
   "d" '(org-roam-dailies-capture-today :which-key "Note of the Day")
   "e" '(elfeed :which-key "Check RSS Feeds")
   "g" '(agendafile :which-key "Open Latest Org Agenda")
   "i" '(dotemacs :which-key "Open init.el")
   "l" '(org-agenda-list :which-key "Open Agenda List")
   "m" '(counsel-imenu :which-key "counsel-imenu")
   "o" '(initorg :which-key "Open Literate Config")
   "u" '(mu4e :which-key "Check Mail!"))
#+end_src
Finally some useful commands for window navigations
#+begin_src emacs-lisp
  (general-define-key
   "<escape>" 'keyboard-escape-quit
   "M-1" 'shell-command
   "M-2" 'split-window-below
   "M-3" 'split-window-right
   "M-o" 'other-window
   "M-r" 'enlarge-window
   "M-R" 'shrink-window
   "M-." 'enlarge-window-horizontally
   "M-," 'shrink-window-horizontally
   "M-<left>" 'windmove-left
   "M-<up>" 'windmove-up
   "M-<down>" 'windmove-down
   "M-<right>" 'windmove-right
   "C-<SPC>" 'set-mark-command
   "C-x <SPC>" 'rectangle-mark-mode)
#+end_src
This may be a temporary one, but having a bind for compiling in a mode like c++ is useful
#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'c++-mode-map
   "C-z C-z" 'compile))
#+end_src
** Which-Key
As an added bonus I have the =which-key= mode installed, so I can see which commands I have binded above:
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode)
    :diminish which-key-mode
    :custom (which-key-idle-delay 0.3))
#+end_src
* Text-Editing modes
** LaTeX
So far, I am loving AUCTeX for my LaTeX documents, and it is helping my editing, so I use that!
#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    ;; do NOT like this solution
    :bind (("C-z TAB" . 'mpc/hide-latex-preamble))
    :hook
    (TeX-mode       . mpc/LaTeX-setup)
    (plain-TeX-mode . mpc/LaTeX-setup)
    (TeXinfo-mode   . mpc/LaTeX-setup)
    (LaTeX-mode     . mpc/LaTeX-setup)
    (docTeX-mode    . mpc/LaTeX-setup)
    (LaTeX-mode     . flymake-mode)
    :custom
    (TeX-view-program-selection
      '(((output-dvi has-no-display-manager) "dvi2tty") 
        ((output-dvi style-pstricks)  "dvips and gv")
         (output-dvi "xdvi")
         (output-pdf "Zathura")
         (output-html "xdg-open")))
    (TeX-engine 'luatex)
    (TeX-parse-self t)
    (LaTeX-beamer-item-overlay-flag nil)
    (LaTeX-section-hook
     '(LaTeX-section-heading LaTeX-section-title LaTeX-section-section))

    (LaTeX-indent-environment-list
     '(("verbatim" current-indentation)
       ("verbatim*" current-indentation)
       ("filecontents" current-indentation)
       ("filecontents*" current-indentation)
       ("tabular" LaTeX-indent-tabular)
       ("tabular*" LaTeX-indent-tabular)
       ("array" LaTeX-indent-tabular)
       ("picture")
       ("tabbing")))

    (LaTeX-electric-left-right-brace t)
    (LaTeX-float "H")
    (TeX-output-dir "./build"))
#+end_src
** Doc-View
I do not want Doc-View to have the line number(s) on the side, so I make use of an earlier defun:
#+begin_src emacs-lisp
  (use-package doc-view
    :ensure nil
    :defer
    :hook (doc-view-mode . mpc/no-lines-setup))
#+end_src
** Text Manipulation
*** Moving text
Move-text is usefule for moving text line by line at a time, especially with blocks of text.
#+begin_src emacs-lisp
  (use-package move-text
    :defer 2
    :diminish 
    :bind (("M-p" . 'move-text-up)
           ("M-n" . 'move-text-down)))
#+end_src
*** Multiple cursors
Just another fairly basic feature in a modern editor to edit multiple occurences of something, or even multiple lines!
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :defer 2
    :diminish
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->"         . mc/mark-next-like-this)
           ("C-<"         . 'mc/mark-previous-like-this)
           ("C-c C-<"     . 'mc/mark-all-like-this)))
#+end_src
*** Snippets
Snippets are another useful feature in emacs, especially when making literate configurations like this. 
#+begin_src emacs-lisp
  (use-package yasnippet
    :defer 5
    :config (yas-global-mode)
    :custom (yas-snippet-dirs '("~/.config/emacs/mysnippets")))
#+end_src
You might want to add these snippets to your directory, however I find them somewhat annoying when editing elisp
#+begin_example
  (use-package yasnippet-snippets
    :after yasnippet)
#+end_example
* Org mode
** Org-Bullets
Org-Bullets makes an org document look nice and less like plain text
#+begin_src emacs-lisp
  (use-package org-bullets
    :defer
    :hook (org-mode . org-bullets-mode))
#+end_src
** Org-Roam
Roam is an interesting note taking system, so far it is useful for note taking in class especially during lectures, using the zettelkasten thought process
#+begin_src emacs-lisp
  (use-package org-roam
    :defer 1
    :init (setq org-roam-v2-ack t)
    :custom
    (org-roam-graph-executable "dot")
    (org-roam-graph-viewer "chromium")
    (org-roam-directory "~/Org/Roam")
    (org-roam-completion-everywhere t)
    (org-roam-completion-system 'ivy)
    :config
    (general-define-key
     :prefix "C-z"
     "n" '(nil :which-key "Roam Prefix")
     "n l" '(org-roam-buffer-toggle :which-key "Toggle Roam Buffer")
     "n f" '(org-roam-node-find :which-key "Find Node")
     "n i" '(org-roam-node-insert :which-key "Insert Node")
     "n d" '(org-roam-dailies-capture-today :which-key "Capture Daily")
     "n t" '(org-roam-dailies-goto-today :which-key "Goto Daily"))
    (org-roam-setup))
#+end_src
** Org Mode
Org mode is super useful, but if you are reading this you probably know that
#+begin_src emacs-lisp
  (use-package org
    :defer 1
    :hook ((org-mode . mpc/org-mode-setup)
           (org-agenda-mode . mpc/no-lines-setup))

    :bind (:map org-mode-map
                ("<C-M-return>" . org-insert-todo-subheading)
                ("<C-return>"   . org-insert-subheading))
    :custom
    (org-tags-column 0)
    (org-ellipsis " [+]")
    (org-directory "~/Org/Agenda/")
    (org-agenda-files (directory-files "~/Org/Agenda/" t "\\.org$"))
    (org-agenda-tags-column -80)
    (org-hide-block-startup t)
    (org-clock-sound "~/Downloads/bell.wav")
    :custom-face
    (org-block    ((t :foreground "#e4e4ef")))
    (org-ellipsis ((t :foreground "#FFFFFF" :underline nil)))
    (org-level-1  ((t :inherit 'outline-1 :height 1.15)))
    (org-verbatim ((t :foreground "#888888")))
    :config
    (require 'org-tempo)
    (setq org-tempo-keywords-alist nil)
    (setq org-refile-targets '((mpc/org-agenda-list :maxlevel . 3)))
    (add-to-list 'org-file-apps '("\\.pdf\\'" . "zathura %s"))
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode)))
#+end_src
** Capture Templates
In order to add various agenda entries in an efficient manner, I created a number of capture templates to add homework entries for my current classes as well as with emails, note the email ones do require you have =org-mu4e= in your =mu4e= config. We start with initializing the =org-capture-templates= variable so it is non-nil when we add to list
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("p" "PHYS 167b")
          ("w" "Weekly Meetings")
          ("i" "Action Items")
          ("m" "Mail Workflow")))
#+end_src
I won't really be taking classes much anymore, but this is good just to have as a template for what I used to do
#+begin_src emacs-lisp
  (add-to-list 'org-capture-templates
               '(("pr" "167b Reading"
                  entry (file+olp "SP24.org" "PHYS 167b" "Readings")
                  "* TODO 167b %?")
                 ("pe" "167b Exam"
                  entry (file+olp "SP24.org" "PHYS 167b" "Exams")
                  "* TODO 167b Exam %?")
                 ("ph" "167b HW"
                  entry (file+olp "SP24.org" "PHYS 167b" "Homework")
                  (function (lambda () (mpc/create-todo-entry "167b" "PHYS" "SP24"))))))
#+end_src
This is the bulk of the improvements which I have done so far, meetings and action items are highly structured now, prompting for the required headings and such, finishing instantly
#+begin_src emacs-lisp
  ;; Meetings
  (add-to-list 'org-capture-templates
               '("wa" "QT Meeting"
                 entry (file+olp "Research.org" "ATLAS QT")
                 (function (lambda () (mpc/meeting-custom-dl "QT ")))
                 :immediate-finish t))

  (add-to-list 'org-capture-templates
               '("wn" "VBS VVH Meeting"
                 entry (file+olp "Research.org" "VBS VVH")
                 (function (lambda () (mpc/meeting-fixed-dl "VBS Higgs " "Mon")))
                 :immediate-finish t))

  (add-to-list 'org-capture-templates
               '("ww" "Aram Meeting"
                 entry (file+olp "Research.org" "Other")
                 (function (lambda () (mpc/meeting-fixed-dl "Aram Group " "Mon")))
                 :immediate-finish t))

  (add-to-list 'org-capture-templates
               '("wb" "Brandeis Meeting"
                 entry (file+olp "Research.org" "Other")
                 (function (lambda () (mpc/meeting-fixed-dl "Brandeis-ATLAS " "Wed")))
                 :immediate-finish t))

  (add-to-list 'org-capture-templates
               '("ws" "Other Meeting"
                 entry (file+olp "Research.org" "Other")
                 (function (lambda () (mpc/meeting-custom-dl "")))
                 :immediate-finish t))

  ;; Action Items
  (add-to-list 'org-capture-templates
               '("ia" "QT Action Item"
                 entry (file+olp "Research.org" "ATLAS QT")
                 (function (lambda () (mpc/action-item "QT " "3")))
                 :immediate-finish t))

  (add-to-list 'org-capture-templates
               '("in" "VBS VVH Action Item"
                 entry (file+olp "Research.org" "VBS VVH")
                 (function (lambda () (mpc/action-item "VBS Higgs " "3")))
                 :immediate-finish t))

  (add-to-list 'org-capture-templates
               '("ii" "Misc TODO"
                 entry (file+olp "Research.org" "Other")
                 (function (lambda () (mpc/action-item "" "3")))
                 ))
#+end_src
I also have my mail workflow, even if it is outdated and not really useful anymore
#+begin_src emacs-lisp
  ;; Follow up on Email
  (add-to-list 'org-capture-templates
               '("mf" "Follow Up" entry (file+olp "Mail.org" "Follow Up")
                  "* TODO Follow up with %:fromname on %a\nSCHEDULED: %t DEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%i"))
  ;; Read Email later
  (add-to-list 'org-capture-templates
               '("mr" "Read Later" entry (file+olp "SU23.org" "MAIL" "Read Later")
                  "* TODO Read %:subject\nSCHEDULED: %t\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n\n%a\n\n%i"
                  :immediate-finish t))
  ;; Attend Event in Email
  (add-to-list 'org-capture-templates
               '("mm" "Attend Included Event" entry (file+olp "Mail.org" "Meetings")
                 "* TODO Attend %:subject %a\nSCHEDULED: %t\n%i"))
  ;; Send email to someone
  (add-to-list 'org-capture-templates
               '("ms" "Send Email" entry (file+olp "Mail.org" "Send Email")
                 "* TODO Send Email to %? about \nSCHEDULED: %t DEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))"))
#+end_src
There is also a number of custom agenda commands, but I do not take very much advantage of this
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("z" "View Current Semester"
           ((agenda)
            (tags-todo "SP24")))))
#+end_src
** Structure Templates
Structure templates are super useful when making literate files such as this one!
#+begin_src emacs-lisp
  (setq org-structure-template-alist
        '(("s" . "src"     ) ("e" . "example") ("q" . "quote"  ) ("v" . "verse" )
          ("V" . "verbatim") ("c" . "center" ) ("C" . "comment") ("l"  . "latex")
          ("a" . "ascii"   ) ("i" . "index"  )
          ("el" . "src emacs-lisp") ("sb" . "src bash")))
#+end_src
* Fun Stuff!
** Elfeed
elfeed is fun, I do not really use it too much
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :defer t
    :custom
    (elfeed-db-directory (concat user-emacs-directory "elfeed"))
    (elfeed-feeds '(("https://atlas.cern/updates/briefing/feed.xml" physics)
                    ("http://feeds.aps.org/rss/recent/physics.xml" physics)
                    ("https://export.arxiv.org/rss/hep-ex" phyics article)
                    ("https://export.arxiv.org/rss/hep-ph" physics article)))
    :commands (elfeed))
#+end_src
** Slack
This is not set up yet, but the setup would look like
#+begin_example
;; TODO: Setup slack for emacs
;; (use-package slack)
#+end_example
** mu4e
MU 4 Emacs is the most used email client, so sad it is kinda annoying to use
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :hook ((mu4e-headers-mode . (lambda () (display-line-numbers-mode 0)))
           (mu4e-main-mode . (lambda () (display-line-numbers-mode 0))))
    :load-path "/usr/share/emacs/site-lisp/mu4e"
    :config
    ;; Load org-mode integration
    (require 'mu4e-org)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a -c ~/.config/isync/mbsyncrc")
    (setq mu4e-maildir "~/repos/Mail")

    ;; Use Ivy for mu4e completions (maildir folders, etc)
    (setq mu4e-completing-read-function #'ivy-completing-read)

    ;; Make sure that moving a message (like to Trash) causes the
    ;; message to get a new file name.  This helps to avoid the
    ;; dreaded "UID is N beyond highest assigned" error.
    ;; See this link for more info: https://stackoverflow.com/a/43461973
    (setq mu4e-change-filenames-when-moving t)
  
    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash")

    (setq mu4e-maildir-shortcuts
      '((:maildir "/INBOX"             :key ?i)
        (:maildir "/BRANDEIS"          :key ?b)
        (:maildir "/[Gmail]/Sent Mail" :key ?s)
        (:maildir "/[Gmail]/Trash"     :key ?t)
        (:maildir "/[Gmail]/Drafts"    :key ?d)
        (:maildir "/[Gmail]/All Mail"  :key ?a))))
#+end_src

* Coding Adjacent, Make Emacs an IDE
** Projectile
Projectile is very useful if you have several projects locally, usually defined by git repos within a specified directory
#+begin_src emacs-lisp
  (use-package projectile
    :defer 1
    :bind (:map projectile-mode-map ("C-z p" . projectile-command-map))
    :custom
    (projectile-completion-system 'ivy)
    (projectile-project-search-path
     '(("~/repos/" . 1) ("~/repos/Programming" . 1)))
    :config
    (projectile-mode +1))
#+end_src
** Magit
I love magit, it is super robust to use, and the config is drop dead simple to use, in fact it is only two lines because I made it two lines
#+begin_src emacs-lisp
  (use-package magit :defer 1)
#+end_src
** Indent Guides
They're hot
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure nil
    :defer 1
    :hook ((prog-mode . highlight-indent-guides-mode))
    :custom
    (highlight-indent-guides-auto-enabled nil)
    :custom-face
    (highlight-indent-guides-odd-face ((t :background "#303030")))
    (highlight-indent-guides-even-face ((t :background "#252525")))
    )
#+end_src
** Hideshow
Hide and Show code blocks
#+begin_src emacs-lisp
  (use-package hideshow
    :ensure nil
    :hook ((prog-mode . hs-minor-mode))
    :config
    (general-define-key
     :prefix "C-z"
     "C-<tab>" '(hs-toggle-hiding :which-key "Hide/Show Block")))
#+end_src
** Treemacs
Fun lil file explorer on a dedicated side panel
#+begin_src emacs-lisp
  (use-package treemacs
    :defer 1
    :ensure nil
    :hook (treemacs-mode . mpc/no-lines-setup))
#+end_src
** Tramp
Tramp is useful for editing files on remote machines, essential for my workflow
#+begin_src emacs-lisp
  (use-package tramp
    :defer 1
    :custom (shell-prompt-pattern '"^[^#$%>\n]*~?[#$%>] *"))
#+end_src
** Cuda
I needed to edit =CUDA= files for research in undergrad, so =cuda-mode= was useful:
#+begin_src emacs-lisp
  (use-package cuda-mode
    :defer t
    :config
    (add-to-list 'auto-mode-alist '("\\.cu$" . cuda-mode)))
#+end_src
** Octave
Octave is a useful alternative to Mathematica or MATLAB, easy to make some quick plots or solve ODEs
#+begin_src emacs-lisp
  (use-package octave
    :defer
    :ensure nil
    :config (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode)))
#+end_src
** Haskell
I love Haskell, every so often I will go back and use it for fun, and the haskell mode in melpa is very useful.
#+begin_src emacs-lisp
  (use-package haskell-mode
    :defer
    :bind (("C-c C-c" . compile))
    :hook ((haskell-mode . interactive-haskell-mode)
           (haskell-mode . haskell-indent-mode)
           (haskell-mode . lsp))
    :custom
    (haskell-process-type 'stack-ghci) ; use stack ghci instead of global ghc
    (haskell-stylish-on-save t))
#+end_src
** Python
The builtin mode for python lacks a few things, namely ipython notebook support and virtual environment detection, so those features are added here
*** pvenv-auto
Automatically detect virtual environment to use with default python-mode repl
#+begin_src emacs-lisp
  (use-package pyvenv-auto
    :defer 1
    :hook ((python-mode . pyvenv-auto-run)))
#+end_src
*** ein
This package is very iffy to me, but is useful if you absolutely need the emacs bindings to edit jupyter notebooks
#+begin_example
  (use-package ein
    :ensure nil
    :defer t)
#+end_example
** LSP
Language Servers are super cool to play around with. Current the python lsp and c-like lsps work, but the haskell one is a bit iffy, emacs does not seem to like communicating with ghcup
#+begin_src emacs-lisp
  (defun mpc/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :defer t
    :commands (lsp lsp-deferred)
    :hook ((python-mode . lsp)
           (haskell-mode . lsp)
           (c-mode . lsp)
           (c++-mode . lsp)
           (lsp-mode . mpc/lsp-mode-setup))
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (setq lsp-log-io nil)
    (setq lsp-haskell-server-path "haskell-language-server-wrapper")
    (setq lsp-haskell-server-args nil)
    (lsp-enable-which-key-integration t)
    (lsp-register-custom-settings
     '(("pyls.plugins.pyls_mypy.enabled" t t)
       ("pyls.plugins.pyls_mypy.live_mode" nil t)
       ("pyls.plugins.pyls_black.enabled" t t)
       ("pyls.plugins.pyls_isort.enabled" t t))))

  (use-package lsp-haskell
    :ensure t
    :config
    (setq lsp-haskell-formatting-provider "ormolu"))
#+end_src
*** LSP-UI
Adds some interesting UI elements to lsp:
#+begin_src emacs-lisp
  (use-package lsp-ui
    :defer t
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src
*** LSP-Treemacs
This will add some nice looking symbols kind of like =all-the-icons-ivy=
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :defer t
    :after lsp)
#+end_src
*** LSP-ivy
Integrates LSP with ivy!
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :defer t
    :after lsp)
#+end_src
** VTerm
This package integrates =libvterm= within emacs, and turns emacs into a proper terminal
#+begin_src emacs-lisp
  (use-package vterm
    :defer t
    :hook (vterm-mode . mpc/no-lines-setup)
    :ensure t)
#+end_src
* Cleaning up what we started
This is the last bit of what we did at the Startup Helping section
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
    (lambda () (setq file-name-handler-alist mpc--file-name-handler-alist)))
#+end_src
* Local Variables
;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t) 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
